name: SubDimensionMinimalHUD

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    atmo_radar:
        class: RadarPVPAtmospheric
        select: all
    space_radar:
        class: RadarPVPSpace
        select: manual
    databank:
        class: DataBankUnit
    screen:
        class: ScreenUnit
        select: manual
    forcefields:
        class: ManualSwitchUnit
        select: manual
    telemeter:
        class: TelemeterUnit
        select: manual


handlers:
    unit:
        start:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                brakeLock = false
                autoStabilise = false
                collisionAvoidance = false
                stabiliseMode = "off"
                targetPitch = 0

                altitudeHold = false
                targetAltitude = 0

                holdModes = {"Off", "Flat", "Alt", "Climb"}
                holdMode = 1

                boostersOn = false

                tankCount = atmofueltank_size + spacefueltank_size

                hudTemplate = [[
                <head>
                  <style>
                    body {margin: 0}
                    svg {position:absolute; top:0; left:0}
                    .line { fill:none; stroke:#ff7e00; stroke-width:3px; }
                    .mediumLine {fill:none; stroke:#ff7e00; stroke-width:2px; }
                    .thinLine { fill:none; stroke:#ff7e00; stroke-width:1px; }

                    .throttleMaxLine { fill:#ffffff66; stroke:#ffffff66; stroke-width:1px;}
                    .throttleLine { fill:#ff7e00; stroke:#ff7e00; stroke-width:1px;}

                    .fuelLine { fill:#aa0016; stroke:#aa001666; stroke-width:1px;}
                    .atmoFuelLine { fill:#4c8ba7; stroke:#4c8ba7; stroke-width:1px;}
                    .spaceFuelLine { fill:#fcba12; stroke:#fcba12; stroke-width:1px;}

                    .on {fill:#ff7e00;}
                    .off {fill:none;}

                    text {fill:#fcba12; font-size:120%%}
                  </style>
                </head>
                <body>

                <svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg"
                  width="100%%" height="100%%">

                  <g class="mediumLine">
                    <circle cx="50%%" cy="50%%" r="50"/>
                    <line x1="920" y1="50%%" x2="900" y2="50%%"/>
                    <line x1="1000" y1="50%%" x2="1020" y2="50%%"/>
                    <line x1="50%%" y1="600" x2="50%%" y2="590" />

                    <line x1="1030" y1="490" x2="1030" y2="590" />
                    <line x1="890" y1="490" x2="890" y2="590" />
                    <line x1="900" y1="610" x2="1020" y2="610" />


                    <g transform="rotate(%.2f, 960, 540)">
                      <circle cx="50%%" cy="50%%" r="30"/>
                      <line x1="930" y1="50%%" x2="920" y2="50%%"/>
                      <line x1="990" y1="50%%" x2="1000" y2="50%%"/>
                      <text x="935" y="50%%" style="font-size:80%%" text-anchor="start" alignment-baseline="central">%.1f°</text>
                    </g>

                    <g transform="translate(0, %.1f)">
                      <line x1="1020" y1="50%%" x2="1030" y2="50%%"/>
                      <line x1="900" y1="50%%" x2="890" y2="50%%"/>
                      <text x="885" y="50%%" style="font-size:80%%" text-anchor="end" alignment-baseline="central">%.1f°</text>
                    </g>

                    <g transform="translate(%.1f, 0)">
                      <line x1="50%%" y1="610" x2="50%%" y2="600" />
                      <text x="50%%" y="620" style="font-size:80%%" text-anchor="middle" alignment-baseline="central">%.1f°</text>
                    </g>
                  </g>

                  <g class="line" transform="translate(215, 992)">
                    <g>
                      <path d="M 369.56701,91.449428 374.0635,86.263941 369.40004,75.239843 398.62436,35.867861 409.1948,37.757755 429.71397,9.409959 427.5377,0.27571723 362.24944,3.7404282 262.45172,60.121069 12.180251,73.035023 0.22215841,91.764469" />
                      <path d="m 351.05718,78.389591 6.83968,-0.94489" />
                      <path d="m 387.74295,20.434123 3.73076,8.18939" />
                      <path d="m 408.57303,45.31718 -7.15064,-0.629965 -23.00636,31.497556 1.86543,5.984533" />
                    </g>

                    <g transform="translate(1490, 0) scale(-1, 1)">
                      <path d="M 369.56701,91.449428 374.0635,86.263941 369.40004,75.239843 398.62436,35.867861 409.1948,37.757755 429.71397,9.409959 427.5377,0.27571723 362.24944,3.7404282 262.45172,60.121069 12.180251,73.035023 0.22215841,91.764469" />
                      <path d="m 351.05718,78.389591 6.83968,-0.94489" />
                      <path d="m 387.74295,20.434123 3.73076,8.18939" />
                      <path d="m 408.57303,45.31718 -7.15064,-0.629965 -23.00636,31.497556 1.86543,5.984533" />
                    </g>

                    <line class="line" x1="408" y1="45.31718" x2="1085" y2="45.31718"/>
                    <line class="line" x1="380" y1="82.170404" x2="1110" y2="82.170404"/>

                    <g class="thinLine" transform="translate(450, 49)">
                      <text x="10" y="20" text-anchor="end">Throttle</text>
                      <rect class="throttleMaxLine" x="20" y="11" width="200" height="10" />
                      <rect class="throttleLine" x="20" y="11" width="%d" height="10" />

                      <line class="thinLine" x1="20" y1="2" x2="20" y2="10"/>
                      <line class="thinLine" x1="120" y1="2" x2="120" y2="10"/>
                      <line class="thinLine" x1="220" y1="2" x2="220" y2="10"/>

                      <line class="thinLine" x1="40" y1="5" x2="40" y2="10"/>
                      <line class="thinLine" x1="60" y1="5" x2="60" y2="10"/>
                      <line class="thinLine" x1="80" y1="5" x2="80" y2="10"/>
                      <line class="thinLine" x1="100" y1="5" x2="100" y2="10"/>

                      <line class="thinLine" x1="140" y1="5" x2="140" y2="10"/>
                      <line class="thinLine" x1="160" y1="5" x2="160" y2="10"/>
                      <line class="thinLine" x1="180" y1="5" x2="180" y2="10"/>
                      <line class="thinLine" x1="200" y1="5" x2="200" y2="10"/>

                      <text x="250" y="20" text-anchor="start">Fuel</text>

                      %s

                      <text style="font-size:90%%" x="450" y="12" text-anchor="end">Brakes</text>
                      <text style="font-size:90%%" x="450" y="26" text-anchor="end">Gear</text>

                      <path class="%s" d="M 6.1564552,0.26458348 H 18.149268 L 19.710347,5.3627792 13.843546,14.735417 H 1.8507333 L 0.289654,9.6374385 Z" transform="translate(480, 0) scale(-1, 1)"/>
                      <path class="%s" d="M 6.1564552,0.26458348 H 18.149268 L 19.710347,5.3627792 13.843546,14.735417 H 1.8507333 L 0.289654,9.6374385 Z" transform="translate(460, 16)"/>
                      <path class="%s" d="M 6.1564552,0.26458348 H 18.149268 L 19.710347,5.3627792 13.843546,14.735417 H 1.8507333 L 0.289654,9.6374385 Z" transform="translate(480, 0)"/>
                      <path class="%s" d="M 6.1564552,0.26458348 H 18.149268 L 19.710347,5.3627792 13.843546,14.735417 H 1.8507333 L 0.289654,9.6374385 Z" transform="translate(500, 16) scale(-1, 1)"/>

                      <text style="font-size:90%%" x="510" y="12" text-anchor="start">Hold</text>
                      <text style="font-size:90%%" x="510" y="26" text-anchor="start"> </text>

                      <line class="thinLine" x1="545" y1="0" x2="545" y2="28"/>

                      <text style="font-size:90%%" x="590" y="12" text-anchor="end">Mass</text>
                      <text style="font-size:90%%" x="590" y="26" text-anchor="end">B. Dist.</text>

                      <text style="font-size:90%%" x="600" y="12" text-anchor="start">%.1f t</text>
                      <text style="font-size:90%%" x="600" y="26" text-anchor="start">%.1f %s</text>
                    </g>
                  </g>

                  <text style="font-size:110%%" x="1460" y="80" text-anchor="end">%s</text>
                </svg>

                </body>]]

                fuelTankTemplate = [[<rect class="fuelLine" x="290" y="%d" width="100" height="%d" />
                <rect class="%s" x="290" y="%d" width="%d" height="%d" />]]

                -- Rocket to Space engine transition patch.
                local realGetMaxKP = core.getMaxKinematicsParametersAlongAxis
                core.getMaxKinematicsParametersAlongAxis = function (...)
                  local result = realGetMaxKP(...)
                  if result[1] < 1 then result[1] = result[3] end
                  if result[2] < 1 then result[2] = result[4] end
                  return result
                end

                function getPitch(gravityDirection, forward, right)
                    local horizontalForward = gravityDirection:cross(right):normalize_inplace()
                    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg
                    if horizontalForward:cross(-forward):dot(right) < 0 then pitch = -pitch end
                    return pitch
                end

                function getRelativePitch(velocity)
                    local pitch = -math.deg(math.atan(velocity.y, velocity.z)) + 180
                    -- This is 0-360 where 0 is straight up
                    pitch = pitch - 90
                    -- So now 0 is straight, but we can now get angles up to 420
                    if pitch < 0 then
                       pitch = 360 + pitch
                    end
                    -- Now, if it's greater than 180, say 190, make it go to like -170
                    if pitch > 180 then
                       pitch = -180 + (pitch-180)
                    end
                    -- And it's backwards.
                    return -pitch
                end

                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})


                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                --core.show()
                unit.hide()

                --if gyro ~= nil then gyro.show() end
                --_autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")

                --if atmofueltank_size > 0 then
                --    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                --end
                --if spacefueltank_size > 0 then
                --    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                --end

                --_autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                _autoconf.displayCategoryPanel(space_radar, space_radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")

                -- ToDo add to HUD
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")

                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end

                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)


                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                gearExtended = true
                local speed = vec3.new(core.getVelocity()):len() * constants.m2kph
                if speed > 100 then
                  gearExtended = false
                end

                if gearExtended then
                    Nav.control.extendLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                else
                    Nav.control.retractLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(100)
                end

                if forcefields_1 then
                  forcefields_1.deactivate()
                end

                -- Set R & T to 5% throttle, mousewheel still 10%
                Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleAtomicStepValue  = 0.01
                Nav.axisCommandManager.axisCommands[axisCommandId.longitudinal].throttleMouseStepScale  =  10



                atmoTanksMax = {}
                atmoTanksCurrent = {}

                spaceTanksMax = {}
                spaceTanksCurrent = {}

                fuelTankCount = atmofueltank_size + spacefueltank_size
                fuelTankDrawHeight = math.floor(22 / fuelTankCount)
                if fuelTankDrawHeight < 3 then fuelTankDrawHeight = 3 end
                local totalTankDrawHeight = fuelTankDrawHeight * fuelTankCount
                fuelTankTopOffset = 22 - totalTankDrawHeight
                if fuelTankTopOffset < 0 then fuelTankTopOffset = 0 end

                for tank=1,atmofueltank_size do
                  atmoTanksMax[tank] = math.floor(atmofueltank[tank].getMaxVolume())
                  atmoTanksCurrent[tank] = math.floor(atmofueltank[tank].getItemsVolume())
                end

                for tank=1,spacefueltank_size do
                  spaceTanksMax[tank] = math.floor(spacefueltank[tank].getMaxVolume())
                  spaceTanksCurrent[tank] = math.floor(spacefueltank[tank].getItemsVolume())
                end

                unit.setTimer("updateTanks", 1) -- one second

                brakingDistance = 0
                brakingDistanceUnit = "km"
                function calculateBrakingDistance()
                  local speed = vec3.new(core.getVelocity()):len()
                  local mass = core.getConstructMass()
                  local maxBrakingForce = json.decode(unit.getData()).maxBrake
                  if not maxBrakingForce then
                    brakingDistance = 0
                    brakingDistanceUnit = "km"
                    return
                  end

                  local c = (30000*1000)/3600
                  local cSq = c*c
                  local totA = -maxBrakingForce * (1 / mass)

                  local k1 = c * math.asin( speed / c)
                  local k2 = cSq * math.cos(k1 / c) / totA
                  local t = -k1 / totA
                  local d = k2 - cSq * math.cos( (totA*t + k1) / c ) / totA
                  local d_su = d / 200000

                  if d_su < 0.5 then
                    brakingDistance = d / 1000
                    brakingDistanceUnit = "km"
                  else
                    brakingDistance = d_su
                    brakingDistanceUnit = "su"
                  end

                end

                calculateBrakingDistance()
                unit.setTimer("updateBraking", 1) -- 30 seconds


        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()

                if gearExtended then
                    if forcefields_1 then
                      forcefields_1.activate()
                    end
                else
                    if forcefields_1 then
                      forcefields_1.deactivate()
                    end
                end

        tick:
          args: ["updateTanks"]
          lua: |
            for tank=1,atmofueltank_size do
              atmoTanksCurrent[tank] = math.floor(atmofueltank[tank].getItemsVolume())
            end

            for tank=1,spacefueltank_size do
              spaceTanksCurrent[tank] = math.floor(spacefueltank[tank].getItemsVolume())
            end

        tick:
          args: ["updateBraking"]
          lua: |
            calculateBrakingDistance()

    system:
        start:
            lua: |

                system.setScreen('HUD Error')
                screenOn = 1
                system.showScreen(screenOn)

        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  3 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                if brakeLock then
                  brakeInput = 1
                end

                if holdMode>1 then

                  local worldV = vec3(core.getWorldVertical())
                  local constrF = vec3(core.getConstructWorldOrientationForward())
                  local constrR = vec3(core.getConstructWorldOrientationRight())
                  local velocity = vec3(core.getWorldVelocity())

                  local roll = getRoll(worldV, constrF, constrR)
                  local targetRoll = 0

                  if holdMode == 3 then
                    local altitude = core.getAltitude()
                    local velMag = vec3(velocity):len()

                    local altDiff = targetAltitude - altitude
                    local MaxPitch = 20

                    local minmax = 500 + velMag
                    targetPitch = (utils.smoothstep(altDiff, -minmax, minmax) - 0.5)*2*MaxPitch
                  end

                  if (rollPID == nil) then
                      rollPID = pid.new(6 * 0.01, 0, 6 * 0.02)
                  end
                  rollPID:inject(targetRoll - roll)
                  local autoRollInput = rollPID:get()

                  rollInput = autoRollInput
                  local pitch = 0
                  if worldV:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    pitch = getPitch(worldV, constrF, constrR)
                  else
                    pitch = getRelativePitch(velocity)
                  end
                  --local targetPitch = 0
                  if (pitchPID == nil) then
                    pitchPID = pid.new(8 * 0.01, 0, 8 * 0.01)
                  end
                  pitchPID:inject(targetPitch - pitch)
                  local autoPitchInput = pitchPID:get()

                  pitchInput = autoPitchInput
                end

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

        update:
            lua: |
              Nav:update()
              local worldVertical = vec3(core.getWorldVertical())
              local velocity = vec3(core.getVelocity())

              local pitch = 0
              local roll = 0
              local yaw = -(math.deg(math.atan(velocity.y, velocity.x)) - 90)

              if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                -- Atmo
                local worldV = vec3(core.getWorldVertical())
                local constrF = vec3(core.getConstructWorldOrientationForward())
                local constrR = vec3(core.getConstructWorldOrientationRight())

                roll = getRoll(worldV, constrF, constrR)
                pitch = getPitch(worldV, constrF, constrR)
              else
                -- Space
                pitch = getRelativePitch(velocity)
              end

              local limitedPitch = math.min(math.max(pitch, -90), 90) / 2
              local limitedRoll = math.min(math.max(roll, -90), 90) / 2
              local limitedYaw = math.min(math.max(yaw, -90), 90) / 2

              --  fuelTankTemplate = [[<rect class="fuelLine" x="290" y="%d" width="100" height="%d" />
              --  <rect class="%s" x="290" y="%d" width="%d" height="%d" />]]
              local tanks = ""
              for tank=1,atmofueltank_size do
                local top = (tank-1) * fuelTankDrawHeight + fuelTankTopOffset + 4
                local level = math.floor((atmoTanksCurrent[tank] / atmoTanksMax[tank]) * 100)
                tanks = tanks .. string.format(fuelTankTemplate, top, fuelTankDrawHeight-2, "atmoFuelLine", top, level, fuelTankDrawHeight-2)
              end

              for tank=1,spacefueltank_size do
                local top = (tank+atmofueltank_size-1) * fuelTankDrawHeight + fuelTankTopOffset + 4
                local level = math.floor((spaceTanksCurrent[tank] / spaceTanksMax[tank]) * 100)
                tanks = tanks .. string.format(fuelTankTemplate, top, fuelTankDrawHeight-2, "spaceFuelLine", top, level, fuelTankDrawHeight-2)
              end

              local throttleValue = math.floor(unit.getThrottle()) * 2
              if throttleValue > 200 then throttleValue = 200 end

              local brakeStatus = "off"
              if brakeInput > 0 then brakeStatus = "on" end

              local constructMass = core.getConstructMass()/1000

              local targetAltitudeText = ""
              if holdMode == 3 then
                targetAltitudeText = string.format("%d m", targetAltitude)
              end

              system.setScreen( string.format(hudTemplate,
                                                limitedRoll,
                                                roll,
                                                limitedPitch,
                                                pitch,
                                                limitedYaw,
                                                yaw,
                                                throttleValue,
                                                tanks,
                                                brakeStatus,
                                                (gearExtended and "on" or "off"),
                                                (holdMode>1 and "on" or "off"),
                                                "off",
                                                constructMass,
                                                brakingDistance, brakingDistanceUnit,
                                                targetAltitudeText
                                              )
                              )

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                    boostersOn = false
                else
                    Nav.control.retractLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(100)
                    brakeLock = false
                    brakeInput = 0
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = -1 --pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = 0 --pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = 1 --pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = 0 --pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = -1 --rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = 0 --rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = 1 --rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = 0 --rollInput - 1
        actionStart:
            args: [yawright]
            lua: yawInput = -1 --yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = 0 --yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = 1 --yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = 0 --yawInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [brake]
            lua: |
                brakeInput = 1 -- brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end

        actionStop:
            args: [brake]
            lua: |
                brakeInput = 0 --brakeInput - 1
                if brakeLock then
                  brakeLock = false
                end

                holdMode = 1
                pitchInput = 0
                rollInput = 0

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end

        actionStart:
            args: [booster]
            lua: |
                  --Nav:toggleBoosters()
                  boostersOn = not boostersOn

                  if(boostersOn) then
                    unit.setEngineThrust('rocket_engine',1)
                  else
                    unit.setEngineThrust('rocket_engine',0)
                  end
        actionStart:
              args: [stopengines]
              lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)

        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end

        actionStart:
            args: [option1]
            lua: |
                brakeLock = not brakeLock
                brakeInput = 0

        actionStart:
            args: [option2]
            lua: |
                holdMode = holdMode + 1
                if holdMode > 4 then holdMode = 1 end

                targetPitch = 0
                if holdMode == 3 then targetAltitude = math.floor(core.getAltitude() / 100) * 100 end
                if holdMode == 4 then targetPitch = 15 end

                pitchInput = 0
                rollInput = 0
